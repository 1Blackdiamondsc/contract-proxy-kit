{"version":3,"sources":["../../../../src/transactionManagers/utils.ts","styles/globalStyles.ts","utils/balances.ts","utils/networks.ts","components/CpkInfo/index.tsx","components/SafeModules/index.tsx","components/Transactions/index.tsx","../../../../src/config/networks.ts","../../../../src/utils/hexData.ts","../../../../src/utils/transactions.ts","../../../../src/utils/constants.ts","../../../../src/contractManager/ContractVersionUtils.ts","../../../../src/contractManager/ContractV111Utils.ts","../../../../src/contractManager/ContractV120Utils.ts","../../../../src/contractManager/index.ts","../../../../src/safeAppsSdkConnector/index.ts","../../../../src/transactionManagers/TransactionManager.ts","../../../../src/utils/networks.ts","../../../../../src/transactionManagers/CpkTransactionManager/index.ts","../../../../src/utils/checkConnectedToSafe.ts","../../../src/CPK.ts","../../../../src/ethLibAdapters/EthLibAdapter.ts","../../../../../src/ethLibAdapters/Web3Adapter/Web3ContractAdapter.ts","../../../../../src/ethLibAdapters/Web3Adapter/index.ts","../../../../src/utils/httpRequests.ts","../../../../src/config/transactionManagers.ts","../../../../../src/transactionManagers/RocksideTxRelayManager/index.ts","../../../../../src/transactionManagers/SafeTxRelayManager/index.ts","../../../src/index.ts","components/ConnectButton/index.tsx","components/App/index.tsx","serviceWorker.js","index.tsx"],"names":["GlobalStyle","createGlobalStyle","avertaFont","avertaBoldFont","formatBalance","balance","ethDecimals","BigNumber","pow","div","decimalPlaces","toString","getNetworkNameFromId","networkId","1","2","3","4","5","42","100","246","73799","Line","styled","TitleLine","STextField","TextField","CpkInfo","walletState","saltNonce","setSaltNonce","size","strong","isSafeApp","isConnectedToSafe","isProxyDeployed","contractVersion","ownerAddress","hash","showIdenticon","showCopyBtn","showEtherscanBtn","textSize","shortenHash","cpkAddress","cpkBalance","id","label","value","onChange","e","target","BigLine","SButton","Button","SCard","Card","headers","SafeModules","cpk","useState","module","setModule","txHash","setTxHash","safeTxHash","setSafeTxHash","showTxError","setShowTxError","isLoading","setIsLoading","rows","setRows","getModules","useCallback","a","modules","newRows","map","index","cells","content","console","error","useEffect","enableModule","txResult","handleTxResult","disableModule","safeAppsSdkConnector","getBySafeTxHash","txServiceModel","transactionHash","Promise","resolve","reject","promiEvent","then","receipt","catch","network","onClick","color","variant","as","length","SLine","Transactions","enabledRocksideTxRelay","setEnabledRocksideTxRelay","makeTransaction","txs","to","execTransactions","getTransactionHashIfSafeApp","safeTransaction","name","checked","_","_fallbackHandlerAddress","__classPrivateFieldSet","this","NetworkNames","toTxResult","rocksideTxRelayUrl","Web3ConnectButton","WalletConnectProvider","require","default","ConnectButton","onConnect","providerOptions","walletconnect","package","options","infuraId","onClose","Container","Content","initialWalletState","undefined","txManager","tabs","icon","App","selectedTab","setSelectedTab","React","web3","setWeb3","setCpk","updateWalletState","formatedSaltNonce","keccak256","ethLibAdapter","Web3Adapter","networks","masterCopyAddress","proxyFactoryAddress","multiSendAddress","fallbackHandlerAddress","transactionManager","RocksideTxRelayManager","speed","RocksideSpeed","Fastest","CPK","create","newCpk","alert","initializeCpk","getContractVersion","address","getBalance","getNetworkId","getOwnerAccount","updateCpk","provider","Web3","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1bfd2811.chunk.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport BigNumber from 'bignumber.js';\nimport { bufferToHex, ecrecover, pubToAddress } from 'ethereumjs-util';\nexport const getTransactionHashSignature = (ethLibAdapter, ownerAccount, txHash) => __awaiter(void 0, void 0, void 0, function* () {\n    let signature = yield ethLibAdapter.signMessage(txHash, ownerAccount);\n    const hasPrefix = isTxHashSignedWithPrefix(txHash, signature, ownerAccount);\n    let signatureV = parseInt(signature.slice(-2), 16);\n    switch (signatureV) {\n        case 0:\n        case 1:\n            signatureV += 31;\n            break;\n        case 27:\n        case 28:\n            if (hasPrefix) {\n                signatureV += 4;\n            }\n            break;\n        default:\n            throw new Error('Invalid signature');\n    }\n    signature = signature.slice(0, -2) + signatureV.toString(16);\n    return signature;\n});\nexport const getTransactionHashSignatureRSV = (ethLibAdapter, ownerAccount, txHash) => __awaiter(void 0, void 0, void 0, function* () {\n    const signature = yield getTransactionHashSignature(ethLibAdapter, ownerAccount, txHash);\n    return {\n        r: new BigNumber('0x' + signature.slice(2, 66)).toString(10),\n        s: new BigNumber('0x' + signature.slice(66, 130)).toString(10),\n        v: new BigNumber('0x' + signature.slice(130, 132)).toString(10)\n    };\n});\nconst isTxHashSignedWithPrefix = (txHash, signature, ownerAccount) => {\n    let hasPrefix;\n    try {\n        const rsvSig = {\n            r: Buffer.from(signature.slice(2, 66), 'hex'),\n            s: Buffer.from(signature.slice(66, 130), 'hex'),\n            v: parseInt(signature.slice(130, 132), 16)\n        };\n        const recoveredData = ecrecover(Buffer.from(txHash.slice(2), 'hex'), rsvSig.v, rsvSig.r, rsvSig.s);\n        const recoveredAccount = bufferToHex(pubToAddress(recoveredData));\n        hasPrefix = recoveredAccount.toLowerCase() !== ownerAccount.toLowerCase();\n    }\n    catch (e) {\n        hasPrefix = true;\n    }\n    return hasPrefix;\n};\n//# sourceMappingURL=utils.js.map","import avertaBoldFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-bold.woff2'\nimport avertaFont from '@gnosis.pm/safe-react-components/dist/fonts/averta-normal.woff2'\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    padding: 10px;\n  }\n\n  @font-face {\n    font-family: 'Averta';\n    font-display: swap;\n    src: local('Averta'), local('Averta Bold'),\n    url(${avertaFont}) format('woff2'),\n    url(${avertaBoldFont}) format('woff');\n  }\n\n  h4 {\n    color: #008c73;\n    margin: 20px 0 10px 0  !important;\n  }\n`\n\nexport default GlobalStyle\n","import BigNumber from 'bignumber.js'\n\nexport const formatBalance = (balance: BigNumber | undefined): string => {\n  if (!balance) {\n    return '0 ETH'\n  }\n  const ethDecimals = new BigNumber(10).pow(18)\n  return balance.div(ethDecimals).decimalPlaces(7).toString() + ' ETH'\n}\n","type Networks = {\n  [key: number]: string\n}\n\nexport const getNetworkNameFromId = (\n  networkId?: number\n): string | undefined => {\n  if (!networkId) return\n  const networks: Networks = {\n    1: 'Mainnet',\n    2: 'Morden',\n    3: 'Ropsten',\n    4: 'Rinkeby',\n    5: 'Goerli',\n    42: 'Kovan',\n    100: 'xDai',\n    246: 'Energy Web Chain',\n    73799: 'Volta (Energy Web Chain)'\n  }\n  return networks[networkId]\n}\n","import {\n  EthHashInfo,\n  Text,\n  TextField,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { formatBalance } from 'utils/balances'\nimport { getNetworkNameFromId } from 'utils/networks'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 45px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst STextField = styled(TextField)`\n  width: 600px !important;\n`\n\ninterface CpkInfoProps {\n  walletState: WalletState\n  saltNonce: string\n  setSaltNonce: Function\n}\n\nconst CpkInfo = ({ walletState, saltNonce, setSaltNonce }: CpkInfoProps) => {\n  return (\n    <>\n      <Title size=\"sm\">Information</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Network:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.networkId &&\n            getNetworkNameFromId(walletState?.networkId)}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Running as a:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isSafeApp ? 'Safe App' : 'Standalone App'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Connected to:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isConnectedToSafe ? 'Safe account' : 'EOA'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            State of the Proxy:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">\n          {walletState?.isProxyDeployed\n            ? `Deployed ${\n                walletState?.contractVersion &&\n                `(v${walletState?.contractVersion})`\n              }`\n            : 'Not deployed'}\n        </Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            Owner address:\n          </Text>\n        </TitleLine>\n        {walletState?.ownerAddress && (\n          <EthHashInfo\n            hash={walletState?.ownerAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            textSize=\"xl\"\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK address:\n          </Text>\n        </TitleLine>\n        {walletState?.cpkAddress && (\n          <EthHashInfo\n            hash={walletState?.cpkAddress}\n            showIdenticon\n            showCopyBtn\n            showEtherscanBtn\n            textSize=\"xl\"\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK Balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{formatBalance(walletState?.cpkBalance)}</Text>\n      </Line>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK salt nonce:\n          </Text>\n        </TitleLine>\n        {walletState?.saltNonce && (\n          <EthHashInfo\n            hash={walletState?.saltNonce}\n            showCopyBtn\n            textSize=\"xl\"\n            shortenHash={4}\n          />\n        )}\n      </Line>\n      <Title size=\"sm\">Configuration</Title>\n      <Line>\n        <STextField\n          id=\"saltnonce\"\n          label=\"Custom CPK salt nonce\"\n          value={saltNonce}\n          onChange={(e) => setSaltNonce(e.target.value)}\n        />\n      </Line>\n    </>\n  )\n}\n\nexport default CpkInfo\n","import {\n  Button,\n  Card,\n  EthHashInfo,\n  Loader,\n  Table,\n  TableHeader,\n  TableRow,\n  Text,\n  TextField,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\nimport CPK, { TransactionResult } from 'contract-proxy-kit'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { getNetworkNameFromId } from 'utils/networks'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  height: 40px;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\nconst BigLine = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 20px;\n`\n\nconst SButton = styled(Button)`\n  width: 242px;\n`\n\nconst STextField = styled(TextField)`\n  width: 600px !important;\n`\n\nconst SCard = styled(Card)`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`\n\ninterface SafeModulesProps {\n  cpk: CPK\n  walletState: WalletState\n}\n\nconst headers: TableHeader[] = [\n  {\n    id: '1',\n    label: 'Enabled modules'\n  }\n]\n\nconst SafeModules = ({ cpk, walletState }: SafeModulesProps) => {\n  const [module, setModule] = useState<string>('')\n  const [txHash, setTxHash] = useState<string | null | undefined>()\n  const [safeTxHash, setSafeTxHash] = useState<string | undefined>()\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [rows, setRows] = useState<TableRow[]>([])\n\n  const getModules = useCallback(async () => {\n    try {\n      const modules = await cpk.getModules()\n      const newRows: TableRow[] = modules.map((module, index) => ({\n        id: index.toString(),\n        cells: [{ content: module }]\n      }))\n      setRows(newRows)\n    } catch (error) {\n      console.error(error)\n    }\n  }, [cpk])\n\n  useEffect(() => {\n    getModules()\n  }, [getModules])\n\n  const enableModule = async (): Promise<void> => {\n    if (!module) return\n    let txResult\n    setShowTxError(false)\n    setTxHash('')\n\n    try {\n      txResult = await cpk.enableModule(module)\n    } catch (e) {\n      console.error(e)\n      setShowTxError(true)\n      return\n    }\n\n    await handleTxResult(txResult)\n  }\n\n  const disableModule = async (): Promise<void> => {\n    if (!module) return\n    let txResult\n\n    setShowTxError(false)\n    setTxHash('')\n\n    try {\n      txResult = await cpk.disableModule(module)\n    } catch (e) {\n      console.error(e)\n      setShowTxError(true)\n      return\n    }\n\n    await handleTxResult(txResult)\n  }\n\n  const handleTxResult = async (txResult: TransactionResult) => {\n    let txServiceModel\n\n    if (txResult?.safeTxHash) {\n      setSafeTxHash(txResult.safeTxHash)\n      txServiceModel = await cpk.safeAppsSdkConnector?.getBySafeTxHash(\n        txResult.safeTxHash\n      )\n    }\n    if (txResult?.hash || txServiceModel) {\n      setTxHash(txResult.hash || txServiceModel?.transactionHash)\n    }\n\n    setIsLoading(true)\n    await new Promise((resolve, reject) =>\n      txResult?.promiEvent\n        ?.then((receipt: any) => resolve(receipt))\n        .catch(reject)\n    )\n    await getModules()\n    setIsLoading(false)\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Safe modules</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\">Test module available on Rinkeby:</Text>\n        </TitleLine>\n        <EthHashInfo\n          hash=\"0x33A458E072b182152Bb30243f29585a82c45A22b\"\n          textSize=\"xl\"\n          showEtherscanBtn\n          showCopyBtn\n          shortenHash={4}\n          network={getNetworkNameFromId(walletState?.networkId)}\n        />\n      </Line>\n      <BigLine>\n        <STextField\n          id=\"standard-name\"\n          label=\"Module Address\"\n          value={module}\n          onChange={(e) => setModule(e.target.value)}\n        />\n      </BigLine>\n      <BigLine>\n        <SButton\n          onClick={enableModule}\n          size=\"lg\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Enable module\n        </SButton>\n        <SButton\n          onClick={disableModule}\n          size=\"lg\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Disable module\n        </SButton>\n      </BigLine>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              Transaction hash:\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showEtherscanBtn\n            showCopyBtn\n            network={getNetworkNameFromId(walletState?.networkId)}\n          />\n        </Line>\n      )}\n      {safeTxHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              Safe transaction hash:\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={safeTxHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n            network={getNetworkNameFromId(walletState?.networkId)}\n          />\n        </Line>\n      )}\n      {isLoading ? (\n        <BigLine>\n          <SCard>\n            <Loader size=\"sm\" />\n          </SCard>\n        </BigLine>\n      ) : (\n        <BigLine>\n          {rows.length > 0 ? (\n            <Table headers={headers} rows={rows} />\n          ) : (\n            <SCard>\n              <Text size=\"xl\">No modules enabled</Text>\n            </SCard>\n          )}\n        </BigLine>\n      )}\n    </>\n  )\n}\n\nexport default SafeModules\n","import {\n  Button,\n  Checkbox,\n  EthHashInfo,\n  Text,\n  Title\n} from '@gnosis.pm/safe-react-components'\nimport { WalletState } from 'components/App'\nimport CPK from 'contract-proxy-kit'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { formatBalance } from 'utils/balances'\nimport { getNetworkNameFromId } from 'utils/networks'\n\nconst Line = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 10px 0;\n`\n\nconst SLine = styled(Line)`\n  padding: 0;\n`\n\nconst SButton = styled(Button)`\n  width: 100%;\n`\n\nconst TitleLine = styled.div`\n  margin-right: 10px;\n`\n\ninterface TransactionsProps {\n  cpk: CPK\n  walletState: WalletState\n  enabledRocksideTxRelay: boolean\n  setEnabledRocksideTxRelay: Function\n}\n\nconst Transactions = ({\n  cpk,\n  walletState,\n  enabledRocksideTxRelay,\n  setEnabledRocksideTxRelay\n}: TransactionsProps) => {\n  const [txHash, setTxHash] = useState<string | null | undefined>()\n  const [safeTxHash, setSafeTxHash] = useState<string | undefined>()\n  const [showTxError, setShowTxError] = useState<boolean>(false)\n\n  const makeTransaction = async (): Promise<void> => {\n    if (!walletState.ownerAddress) return\n    let txResult\n    setShowTxError(false)\n    setTxHash('')\n\n    const txs = [\n      {\n        to: walletState.ownerAddress,\n        value: `${11e17}`\n      }\n    ]\n    try {\n      txResult = await cpk.execTransactions(txs)\n    } catch (e) {\n      console.error(e)\n      setShowTxError(true)\n    }\n\n    if (txResult?.safeTxHash) {\n      setSafeTxHash(txResult.safeTxHash)\n    }\n    if (txResult?.hash) {\n      setTxHash(txResult.hash)\n    }\n  }\n\n  const getTransactionHashIfSafeApp = async () => {\n    if (!safeTxHash) return\n    const safeTransaction = await cpk.safeAppsSdkConnector?.getBySafeTxHash(\n      safeTxHash\n    )\n    setTxHash(safeTransaction?.transactionHash)\n  }\n\n  return (\n    <>\n      <Title size=\"sm\">Information</Title>\n      <Line>\n        <TitleLine>\n          <Text size=\"xl\" strong>\n            CPK Balance:\n          </Text>\n        </TitleLine>\n        <Text size=\"xl\">{formatBalance(walletState?.cpkBalance)}</Text>\n      </Line>\n      <Title size=\"sm\">Configuration</Title>\n      <SLine>\n        <Checkbox\n          name=\"checkboxTxRelay\"\n          checked={enabledRocksideTxRelay}\n          onChange={(_, checked) => setEnabledRocksideTxRelay(checked)}\n          label=\"Use Rockside transaction relay\"\n        />\n      </SLine>\n      <Title size=\"sm\">Transactions</Title>\n      <Line>\n        <SButton\n          onClick={makeTransaction}\n          size=\"lg\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Send 1.1 ETH to the CPK owner\n        </SButton>\n      </Line>\n      {showTxError && (\n        <Line>\n          <Text size=\"xl\" color=\"error\">\n            Transaction rejected\n          </Text>\n        </Line>\n      )}\n      {safeTxHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              Safe transaction hash:\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={safeTxHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showCopyBtn\n            network={getNetworkNameFromId(walletState?.networkId)}\n          />\n        </Line>\n      )}\n      {walletState.isSafeApp && safeTxHash && (\n        <Line>\n          <SButton\n            onClick={getTransactionHashIfSafeApp}\n            size=\"lg\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Get transaction hash\n          </SButton>\n        </Line>\n      )}\n      {txHash && (\n        <Line>\n          <TitleLine>\n            <Text size=\"xl\" as=\"span\" strong>\n              Transaction hash:\n            </Text>\n          </TitleLine>\n          <EthHashInfo\n            hash={txHash}\n            textSize=\"xl\"\n            shortenHash={8}\n            showEtherscanBtn\n            showCopyBtn\n            network={getNetworkNameFromId(walletState?.networkId)}\n          />\n        </Line>\n      )}\n    </>\n  )\n}\n\nexport default Transactions\n","// First element belongs to latest release. Do not alter this order. New releases go first.\nconst masterCopyAddressVersions = [\n    {\n        version: '1.2.0',\n        address: '0x6851D6fDFAfD08c0295C392436245E5bc78B0185'\n    },\n    {\n        version: '1.1.1',\n        address: '0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F'\n    }\n];\nexport const defaultNetworks = {\n    // mainnet\n    1: {\n        masterCopyAddressVersions,\n        proxyFactoryAddress: '0x0fB4340432e56c014fa96286de17222822a9281b',\n        multiSendAddress: '0x8D29bE29923b68abfDD21e541b9374737B49cdAD',\n        fallbackHandlerAddress: '0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44'\n    },\n    // rinkeby\n    4: {\n        masterCopyAddressVersions,\n        proxyFactoryAddress: '0x336c19296d3989e9e0c2561ef21c964068657c38',\n        multiSendAddress: '0x8D29bE29923b68abfDD21e541b9374737B49cdAD',\n        fallbackHandlerAddress: '0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44'\n    },\n    // goerli\n    5: {\n        masterCopyAddressVersions,\n        proxyFactoryAddress: '0xfC7577774887aAE7bAcdf0Fc8ce041DA0b3200f7',\n        multiSendAddress: '0x8D29bE29923b68abfDD21e541b9374737B49cdAD',\n        fallbackHandlerAddress: '0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44'\n    },\n    // kovan\n    42: {\n        masterCopyAddressVersions,\n        proxyFactoryAddress: '0xfC7577774887aAE7bAcdf0Fc8ce041DA0b3200f7',\n        multiSendAddress: '0x8D29bE29923b68abfDD21e541b9374737B49cdAD',\n        fallbackHandlerAddress: '0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44'\n    },\n    // xdai\n    100: {\n        masterCopyAddressVersions,\n        proxyFactoryAddress: '0xfC7577774887aAE7bAcdf0Fc8ce041DA0b3200f7',\n        multiSendAddress: '0x8D29bE29923b68abfDD21e541b9374737B49cdAD',\n        fallbackHandlerAddress: '0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44'\n    }\n};\nexport function normalizeNetworksConfig(defaultNetworks, networks) {\n    if (!networks) {\n        return defaultNetworks;\n    }\n    const normalizedNetworks = {};\n    for (const networkId of Object.keys(networks)) {\n        const currentNetwork = networks[networkId];\n        let mcVersions = [];\n        if (currentNetwork.masterCopyAddress) {\n            mcVersions = [\n                {\n                    version: masterCopyAddressVersions[0].version,\n                    address: currentNetwork.masterCopyAddress\n                }\n            ];\n        }\n        else if (currentNetwork.masterCopyAddressVersions) {\n            mcVersions = currentNetwork.masterCopyAddressVersions;\n        }\n        if (mcVersions.length === 0) {\n            throw new Error('Properties \"masterCopyAddress\" or \"masterCopyAddressVersions\" are missing in CPK network configuration');\n        }\n        normalizedNetworks[networkId] = {\n            masterCopyAddressVersions: mcVersions,\n            proxyFactoryAddress: currentNetwork.proxyFactoryAddress,\n            multiSendAddress: currentNetwork.multiSendAddress,\n            fallbackHandlerAddress: currentNetwork.fallbackHandlerAddress\n        };\n    }\n    return Object.assign(Object.assign({}, defaultNetworks), normalizedNetworks);\n}\n//# sourceMappingURL=networks.js.map","export function joinHexData(hexData) {\n    return `0x${hexData\n        .map((hex) => {\n        const stripped = hex.replace(/^0x/, '');\n        return stripped.length % 2 === 0 ? stripped : '0' + stripped;\n    })\n        .join('')}`;\n}\nexport function getHexDataLength(hexData) {\n    return Math.ceil((hexData.startsWith('0x') ? hexData.length - 2 : hexData.length) / 2);\n}\nexport function toHex(v) {\n    return `0x${Number(v.toString()).toString(16)}`;\n}\n//# sourceMappingURL=hexData.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { defaultTxData, defaultTxOperation, defaultTxValue } from './constants';\nimport { toHex } from './hexData';\nexport var OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"Call\"] = 0] = \"Call\";\n    OperationType[OperationType[\"DelegateCall\"] = 1] = \"DelegateCall\"; // 1\n})(OperationType || (OperationType = {}));\nexport class TransactionError extends Error {\n    constructor(message, revertData, revertMessage) {\n        super(message);\n        this.revertData = revertData;\n        this.revertMessage = revertMessage;\n    }\n}\nexport function standardizeTransaction(tx) {\n    return {\n        operation: tx.operation ? tx.operation : defaultTxOperation,\n        to: tx.to,\n        value: tx.value ? tx.value.toString() : defaultTxValue.toString(),\n        data: tx.data ? tx.data : defaultTxData\n    };\n}\nexport function normalizeGasLimit(options) {\n    const { gas, gasLimit } = options, rest = __rest(options, [\"gas\", \"gasLimit\"]);\n    if (gas != null && gasLimit != null) {\n        throw new Error(`specified both gas and gasLimit on options: ${options}`);\n    }\n    return Object.assign(Object.assign({}, rest), { gas: gas || gasLimit });\n}\nexport function formatCallTx(tx) {\n    const { from, to, value, data, gas } = normalizeGasLimit(tx);\n    return {\n        from,\n        to,\n        value: !value ? undefined : toHex(value),\n        data,\n        gas: !gas ? undefined : toHex(gas)\n    };\n}\n//# sourceMappingURL=transactions.js.map","import { OperationType } from './transactions';\nexport const zeroAddress = `0x${'0'.repeat(40)}`;\nexport const sentinelModules = '0x0000000000000000000000000000000000000001';\nexport const defaultTxOperation = OperationType.Call;\nexport const defaultTxValue = '0x0';\nexport const defaultTxData = '0x';\n// keccak256(toUtf8Bytes('Contract Proxy Kit'))\nexport const predeterminedSaltNonce = '0xcfe33a586323e7325be6aa6ecd8b4600d232a9037e83c8ece69413b777dabe65';\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { sentinelModules } from '../utils/constants';\nclass ContractVersionUtils {\n    constructor(contract) {\n        this.contract = contract;\n    }\n    getContractVersion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.contract.call('VERSION', []);\n        });\n    }\n    getModules() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.contract.call('getModules', []);\n        });\n    }\n    encodeEnableModule(moduleAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.contract.encode('enableModule', [moduleAddress]);\n        });\n    }\n    encodeDisableModule(moduleAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const modules = yield this.contract.call('getModules', []);\n            const index = modules.findIndex((module) => module.toLowerCase() === moduleAddress.toLowerCase());\n            const prevModuleAddress = index === 0 ? sentinelModules : modules[index - 1];\n            return this.contract.encode('disableModule', [prevModuleAddress, moduleAddress]);\n        });\n    }\n}\nexport default ContractVersionUtils;\n//# sourceMappingURL=ContractVersionUtils.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport ContractVersionUtils from './ContractVersionUtils';\nclass ContractV111Utils extends ContractVersionUtils {\n    isModuleEnabled(moduleAddress) {\n        const _super = Object.create(null, {\n            contract: { get: () => super.contract }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const modules = yield _super.contract.call('getModules', []);\n            const selectedModules = modules.filter((module) => module.toLowerCase() === moduleAddress.toLowerCase());\n            return selectedModules.length > 0;\n        });\n    }\n}\nexport default ContractV111Utils;\n//# sourceMappingURL=ContractV111Utils.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport ContractVersionUtils from './ContractVersionUtils';\nclass ContractV120Utils extends ContractVersionUtils {\n    isModuleEnabled(moduleAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.contract.call('isModuleEnabled', [moduleAddress]);\n        });\n    }\n}\nexport default ContractV120Utils;\n//# sourceMappingURL=ContractV120Utils.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _versionUtils, _contract, _proxyFactory, _masterCopyAddress, _multiSend, _fallbackHandlerAddress;\nimport cpkFactoryAbi from '../abis/CpkFactoryAbi.json';\nimport multiSendAbi from '../abis/MultiSendAbi.json';\nimport safeAbiV111 from '../abis/SafeAbiV1-1-1.json';\nimport safeAbiV120 from '../abis/SafeAbiV1-2-0.json';\nimport ContractV111Utils from './ContractV111Utils';\nimport ContractV120Utils from './ContractV120Utils';\nclass ContractManager {\n    constructor(ethLibAdapter, network) {\n        _versionUtils.set(this, void 0);\n        _contract.set(this, void 0);\n        _proxyFactory.set(this, void 0);\n        _masterCopyAddress.set(this, void 0);\n        _multiSend.set(this, void 0);\n        _fallbackHandlerAddress.set(this, void 0);\n        __classPrivateFieldSet(this, _masterCopyAddress, network.masterCopyAddressVersions[0].address);\n        __classPrivateFieldSet(this, _fallbackHandlerAddress, network.fallbackHandlerAddress);\n        __classPrivateFieldSet(this, _multiSend, ethLibAdapter.getContract(multiSendAbi, network.multiSendAddress));\n        __classPrivateFieldSet(this, _proxyFactory, ethLibAdapter.getContract(cpkFactoryAbi, network.proxyFactoryAddress));\n    }\n    static create(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contractManager = new ContractManager(opts.ethLibAdapter, opts.network);\n            yield contractManager.init(opts);\n            return contractManager;\n        });\n    }\n    init(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.calculateVersionUtils(opts);\n        });\n    }\n    calculateVersionUtils(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { ethLibAdapter, ownerAccount, saltNonce, network, isSafeApp, isConnectedToSafe } = opts;\n            let proxyAddress;\n            let properVersion;\n            if (isSafeApp || isConnectedToSafe) {\n                const temporaryContract = ethLibAdapter.getContract(safeAbiV111, ownerAccount);\n                properVersion = yield temporaryContract.call('VERSION', []);\n                proxyAddress = ownerAccount;\n            }\n            else {\n                const salt = ethLibAdapter.keccak256(ethLibAdapter.abiEncode(['address', 'uint256'], [ownerAccount, saltNonce]));\n                for (const masterCopyVersion of network.masterCopyAddressVersions) {\n                    proxyAddress = yield this.calculateProxyAddress(masterCopyVersion.address, salt, ethLibAdapter);\n                    const codeAtAddress = yield ethLibAdapter.getCode(proxyAddress);\n                    const isDeployed = codeAtAddress !== '0x';\n                    if (isDeployed) {\n                        const temporaryContract = ethLibAdapter.getContract(safeAbiV111, proxyAddress);\n                        properVersion = yield temporaryContract.call('VERSION', []);\n                        break;\n                    }\n                }\n                if (!properVersion) {\n                    // Last version released\n                    properVersion = network.masterCopyAddressVersions[0].version;\n                    proxyAddress = yield this.calculateProxyAddress(network.masterCopyAddressVersions[0].address, salt, ethLibAdapter);\n                }\n            }\n            switch (properVersion) {\n                case '1.2.0':\n                    __classPrivateFieldSet(this, _contract, ethLibAdapter.getContract(safeAbiV120, proxyAddress));\n                    __classPrivateFieldSet(this, _versionUtils, new ContractV120Utils(__classPrivateFieldGet(this, _contract)));\n                    break;\n                case '1.1.1':\n                    __classPrivateFieldSet(this, _contract, ethLibAdapter.getContract(safeAbiV111, proxyAddress));\n                    __classPrivateFieldSet(this, _versionUtils, new ContractV111Utils(__classPrivateFieldGet(this, _contract)));\n                    break;\n                default:\n                    throw new Error('CPK Proxy version is not valid');\n            }\n        });\n    }\n    calculateProxyAddress(masterCopyAddress, salt, ethLibAdapter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const initCode = ethLibAdapter.abiEncodePacked({ type: 'bytes', value: yield __classPrivateFieldGet(this, _proxyFactory).call('proxyCreationCode', []) }, {\n                type: 'bytes',\n                value: ethLibAdapter.abiEncode(['address'], [masterCopyAddress])\n            });\n            const proxyAddress = ethLibAdapter.calcCreate2Address(__classPrivateFieldGet(this, _proxyFactory).address, salt, initCode);\n            return proxyAddress;\n        });\n    }\n    get versionUtils() {\n        return __classPrivateFieldGet(this, _versionUtils);\n    }\n    /**\n     * Returns the instance of the Safe contract in use.\n     *\n     * @returns The instance of the Safe contract in use\n     */\n    get contract() {\n        return __classPrivateFieldGet(this, _contract);\n    }\n    /**\n     * Returns the instance of the Proxy Factory contract in use.\n     *\n     * @returns The instance of the Proxy Factory contract in use\n     */\n    get proxyFactory() {\n        return __classPrivateFieldGet(this, _proxyFactory);\n    }\n    /**\n     * Returns the Master Copy contract address in use.\n     *\n     * @returns The Master Copy contract address in use\n     */\n    get masterCopyAddress() {\n        return __classPrivateFieldGet(this, _masterCopyAddress);\n    }\n    /**\n     * Returns the instance of the MultiSend contract in use.\n     *\n     * @returns The instance of the MultiSend contract in use\n     */\n    get multiSend() {\n        return __classPrivateFieldGet(this, _multiSend);\n    }\n    /**\n     * Returns the FallbackHandler contract address in use.\n     *\n     * @returns The FallbackHandler contract address in use\n     */\n    get fallbackHandlerAddress() {\n        return __classPrivateFieldGet(this, _fallbackHandlerAddress);\n    }\n}\n_versionUtils = new WeakMap(), _contract = new WeakMap(), _proxyFactory = new WeakMap(), _masterCopyAddress = new WeakMap(), _multiSend = new WeakMap(), _fallbackHandlerAddress = new WeakMap();\nexport default ContractManager;\n//# sourceMappingURL=index.js.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _appsSdk, _safeAddress, _isSafeApp;\nimport SafeAppsSDK from '@gnosis.pm/safe-apps-sdk';\nclass SafeAppsSdkConnector {\n    constructor() {\n        _appsSdk.set(this, void 0);\n        _safeAddress.set(this, void 0);\n        _isSafeApp.set(this, false);\n        __classPrivateFieldSet(this, _appsSdk, new SafeAppsSDK());\n        __classPrivateFieldGet(this, _appsSdk).getSafeInfo().then((appInfo) => {\n            __classPrivateFieldSet(this, _isSafeApp, !!appInfo.safeAddress);\n            __classPrivateFieldSet(this, _safeAddress, appInfo.safeAddress);\n        });\n    }\n    /**\n     * Checks if the CPK is running as a Safe App or as a standalone app.\n     *\n     * @returns TRUE if the CPK is running as a Safe App\n     */\n    get isSafeApp() {\n        return __classPrivateFieldGet(this, _isSafeApp);\n    }\n    /**\n     * Returns the Safe address connected to the CPK if the CPK is running as a Safe App.\n     *\n     * @returns The Safe address\n     */\n    get safeAddress() {\n        return __classPrivateFieldGet(this, _safeAddress);\n    }\n    /**\n     * Returns an instance of the Safe Apps SDK used by the CPK.\n     *\n     * @returns The Safe Apps SDK instance\n     */\n    get appsSdk() {\n        return __classPrivateFieldGet(this, _appsSdk);\n    }\n    /**\n     * Returns the information of the connected Safe App.\n     *\n     * @returns The information of the connected Safe App\n     */\n    getSafeInfo() {\n        return __classPrivateFieldGet(this, _appsSdk).getSafeInfo();\n    }\n    /**\n     * Returns the transaction response for the given Safe transaction hash.\n     *\n     * @param safeTxHash - The desired Safe transaction hash\n     * @returns The transaction response for the Safe transaction hash\n     */\n    getBySafeTxHash(safeTxHash) {\n        return __classPrivateFieldGet(this, _appsSdk).txs.getBySafeTxHash(safeTxHash);\n    }\n    sendTransactions(transactions, params) {\n        return __classPrivateFieldGet(this, _appsSdk).txs.send({ txs: transactions, params });\n    }\n}\n_appsSdk = new WeakMap(), _safeAddress = new WeakMap(), _isSafeApp = new WeakMap();\nexport default SafeAppsSdkConnector;\n//# sourceMappingURL=index.js.map","export var TransactionManagerNames;\n(function (TransactionManagerNames) {\n    TransactionManagerNames[\"CpkTxManager\"] = \"CpkTransactionManager\";\n    TransactionManagerNames[\"SafeTxRelayManager\"] = \"SafeTransactionRelayManager\";\n    TransactionManagerNames[\"RocksideTxRelayManager\"] = \"RocksideTransactionRelayManager\";\n})(TransactionManagerNames || (TransactionManagerNames = {}));\n//# sourceMappingURL=TransactionManager.js.map","export var NetworkNames;\n(function (NetworkNames) {\n    NetworkNames[\"MAINNET\"] = \"MAINNET\";\n    NetworkNames[\"MORDEN\"] = \"MORDEN\";\n    NetworkNames[\"ROPSTEN\"] = \"ROPSTEN\";\n    NetworkNames[\"RINKEBY\"] = \"RINKEBY\";\n    NetworkNames[\"GOERLI\"] = \"GOERLI\";\n    NetworkNames[\"KOVAN\"] = \"KOVAN\";\n    NetworkNames[\"XDAI\"] = \"XDAI\";\n    NetworkNames[\"ENERGY_WEB_CHAIN\"] = \"ENERGY_WEB_CHAIN\";\n    NetworkNames[\"VOLTA\"] = \"VOLTA\";\n})(NetworkNames || (NetworkNames = {}));\nexport const getNetworkIdFromName = (networkName) => {\n    if (!networkName)\n        return;\n    const networks = {\n        MAINNET: 1,\n        MORDEN: 2,\n        ROPSTEN: 3,\n        RINKEBY: 4,\n        GOERLI: 5,\n        KOVAN: 42,\n        XDAI: 100,\n        ENERGY_WEB_CHAIN: 246,\n        VOLTA: 73799\n    };\n    return networks[networkName.toUpperCase()];\n};\n//# sourceMappingURL=networks.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { zeroAddress } from '../../utils/constants';\nimport { OperationType, TransactionError } from '../../utils/transactions';\nimport { TransactionManagerNames } from '../TransactionManager';\nclass CpkTransactionManager {\n    /**\n     * Returns the configuration of the CpkTransactionManager.\n     *\n     * @returns The name of the TransactionManager in use and the URL of the service\n     */\n    get config() {\n        return {\n            name: TransactionManagerNames.CpkTxManager,\n            url: undefined\n        };\n    }\n    /**\n     * Executes a list of transactions.\n     *\n     * @param options\n     * @returns The transaction response\n     */\n    execTransactions({ ownerAccount, safeExecTxParams, transactions, ethLibAdapter, contractManager, saltNonce, isDeployed, isConnectedToSafe, sendOptions }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contract: safeContract, proxyFactory, masterCopyAddress, fallbackHandlerAddress } = contractManager;\n            if (!safeContract) {\n                throw new Error('CPK Proxy contract uninitialized');\n            }\n            if (isConnectedToSafe) {\n                return this.execTxsWhileConnectedToSafe(ethLibAdapter, transactions, sendOptions);\n            }\n            // (r, s, v) where v is 1 means this signature is approved by the address encoded in value r\n            // \"Hashes are automatically approved by the sender of the message\"\n            const autoApprovedSignature = ethLibAdapter.abiEncodePacked({ type: 'uint256', value: ownerAccount }, // r\n            { type: 'uint256', value: 0 }, // s\n            { type: 'uint8', value: 1 } // v\n            );\n            const txObj = isDeployed\n                ? this.getSafeProxyTxObj(safeContract, safeExecTxParams, autoApprovedSignature)\n                : this.getCPKFactoryTxObj(masterCopyAddress, fallbackHandlerAddress, safeExecTxParams, saltNonce, proxyFactory);\n            const { success, gasLimit } = yield this.findGasLimit(ethLibAdapter, txObj, sendOptions);\n            sendOptions.gas = gasLimit;\n            const isSingleTx = transactions.length === 1;\n            if (!success) {\n                throw yield this.makeTransactionError(ethLibAdapter, safeExecTxParams, safeContract.address, gasLimit, isDeployed, isSingleTx);\n            }\n            const { contract, methodName, params } = txObj;\n            return contract.send(methodName, params, sendOptions);\n        });\n    }\n    execTxsWhileConnectedToSafe(ethLibAdapter, transactions, sendOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (transactions.some(({ operation }) => operation === OperationType.DelegateCall)) {\n                throw new Error('DelegateCall unsupported by Gnosis Safe');\n            }\n            if (transactions.length === 1) {\n                const { to, value, data } = transactions[0];\n                return ethLibAdapter.ethSendTransaction(Object.assign({ to,\n                    value,\n                    data }, sendOptions));\n            }\n            return {\n                hash: yield ethLibAdapter.providerSend('gs_multi_send', transactions.map(({ to, value, data }) => ({ to, value, data })))\n            };\n        });\n    }\n    getSafeProxyTxObj(safeContract, { to, value, data, operation }, safeAutoApprovedSignature) {\n        return {\n            contract: safeContract,\n            methodName: 'execTransaction',\n            params: [\n                to,\n                value,\n                data,\n                operation,\n                0,\n                0,\n                0,\n                zeroAddress,\n                zeroAddress,\n                safeAutoApprovedSignature\n            ]\n        };\n    }\n    getCPKFactoryTxObj(masterCopyAddress, fallbackHandlerAddress, { to, value, data, operation }, saltNonce, proxyFactory) {\n        return {\n            contract: proxyFactory,\n            methodName: 'createProxyAndExecTransaction',\n            params: [masterCopyAddress, saltNonce, fallbackHandlerAddress, to, value, data, operation]\n        };\n    }\n    findGasLimit(ethLibAdapter, { contract, methodName, params }, sendOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            function checkOptions(options) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        return yield contract.call(methodName, params, options);\n                    }\n                    catch (e) {\n                        return false;\n                    }\n                });\n            }\n            const toNumber = (num) => Number(num.toString());\n            if (!sendOptions.gas) {\n                const blockGasLimit = toNumber((yield ethLibAdapter.getBlock('latest')).gasLimit);\n                const gasEstimateOptions = Object.assign(Object.assign({}, sendOptions), { gas: blockGasLimit });\n                if (!(yield checkOptions(gasEstimateOptions))) {\n                    return { success: false, gasLimit: blockGasLimit };\n                }\n                const gasSearchError = 10000;\n                let gasLow = yield contract.estimateGas(methodName, params, sendOptions);\n                let gasHigh = blockGasLimit;\n                gasEstimateOptions.gas = gasLow;\n                if (!(yield checkOptions(gasEstimateOptions))) {\n                    while (gasLow + gasSearchError <= gasHigh) {\n                        const testGasLimit = Math.floor((gasLow + gasHigh) * 0.5);\n                        gasEstimateOptions.gas = testGasLimit;\n                        if (yield checkOptions(gasEstimateOptions)) {\n                            // values > gasHigh will work\n                            gasHigh = testGasLimit - 1;\n                        }\n                        else {\n                            // values <= gasLow will fail\n                            gasLow = testGasLimit + 1;\n                        }\n                    }\n                }\n                else {\n                    gasHigh = gasLow - 1;\n                }\n                // the final target gas value is > gasHigh\n                const gasLimit = Math.min(Math.ceil((gasHigh + 1) * 1.02), blockGasLimit);\n                return { success: true, gasLimit };\n            }\n            return {\n                success: yield checkOptions(sendOptions),\n                gasLimit: toNumber(sendOptions.gas)\n            };\n        });\n    }\n    makeTransactionError(ethLibAdapter, { to, value, data, operation }, safeAddress, gasLimit, isDeployed, isSingleTx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let errorMessage = `${isDeployed ? '' : 'proxy creation and '}${isSingleTx ? 'transaction' : 'batch transaction'} execution expected to fail`;\n            let revertData, revertMessage;\n            if (isSingleTx && operation === OperationType.Call) {\n                try {\n                    revertData = yield ethLibAdapter.getCallRevertData({\n                        from: safeAddress,\n                        to,\n                        value,\n                        data,\n                        gasLimit\n                    }, 'latest');\n                    revertMessage = ethLibAdapter.decodeError(revertData);\n                    errorMessage = `${errorMessage}: ${revertMessage}`;\n                }\n                catch (e) {\n                    // empty\n                }\n            }\n            return new TransactionError(errorMessage, revertData, revertMessage);\n        });\n    }\n}\nexport default CpkTransactionManager;\n//# sourceMappingURL=index.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function checkConnectedToSafe(provider) {\n    var _a, _b, _c, _d, _e, _f;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (provider == null)\n            return false;\n        const wc = (yield ((_a = provider.getWalletConnector) === null || _a === void 0 ? void 0 : _a.call(provider))) ||\n            (yield ((_c = (_b = provider.connection) === null || _b === void 0 ? void 0 : _b.getWalletConnector) === null || _c === void 0 ? void 0 : _c.call(_b))) ||\n            provider.wc || ((_d = provider.connection) === null || _d === void 0 ? void 0 : _d.wc);\n        const peerName = (_e = wc === null || wc === void 0 ? void 0 : wc.peerMeta) === null || _e === void 0 ? void 0 : _e.name;\n        if (peerName === 'Safe Multisig WalletConnect' || ((_f = peerName === null || peerName === void 0 ? void 0 : peerName.startsWith) === null || _f === void 0 ? void 0 : _f.call(peerName, 'Gnosis Safe'))) {\n            return true;\n        }\n        if (provider._providers) {\n            return (yield Promise.all(provider._providers.map(checkConnectedToSafe))).includes(true);\n        }\n        return false;\n    });\n}\n//# sourceMappingURL=checkConnectedToSafe.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _safeAppsSdkConnector, _ethLibAdapter, _transactionManager, _contractManager, _networks, _ownerAccount, _saltNonce, _isConnectedToSafe;\nimport multiSendAbi from './abis/MultiSendAbi.json';\nimport { defaultNetworks, normalizeNetworksConfig } from './config/networks';\nimport ContractManager from './contractManager';\nimport SafeAppsSdkConnector from './safeAppsSdkConnector';\nimport CpkTransactionManager from './transactionManagers/CpkTransactionManager';\nimport { checkConnectedToSafe } from './utils/checkConnectedToSafe';\nimport { predeterminedSaltNonce } from './utils/constants';\nimport { getHexDataLength, joinHexData } from './utils/hexData';\nimport { getNetworkIdFromName } from './utils/networks';\nimport { normalizeGasLimit, OperationType, standardizeTransaction } from './utils/transactions';\nclass CPK {\n    /**\n     * Creates a non-initialized instance of the CPK with the selected configuration parameters.\n     *\n     * @param opts - CPK configuration\n     * @returns The CPK instance\n     */\n    constructor(opts) {\n        _safeAppsSdkConnector.set(this, void 0);\n        _ethLibAdapter.set(this, void 0);\n        _transactionManager.set(this, void 0);\n        _contractManager.set(this, void 0);\n        _networks.set(this, void 0);\n        _ownerAccount.set(this, void 0);\n        _saltNonce.set(this, predeterminedSaltNonce);\n        _isConnectedToSafe.set(this, false\n        /**\n         * Creates and initializes an instance of the CPK with the selected configuration parameters.\n         *\n         * @param opts - CPK configuration\n         * @returns The CPK instance\n         */\n        );\n        __classPrivateFieldSet(this, _networks, Object.assign({}, defaultNetworks));\n        if (!opts) {\n            return;\n        }\n        const { ethLibAdapter, transactionManager, ownerAccount, networks, saltNonce, isSafeApp = true } = opts;\n        if (isSafeApp) {\n            __classPrivateFieldSet(this, _safeAppsSdkConnector, new SafeAppsSdkConnector());\n        }\n        if (!ethLibAdapter) {\n            throw new Error('ethLibAdapter property missing from options');\n        }\n        __classPrivateFieldSet(this, _ethLibAdapter, ethLibAdapter);\n        __classPrivateFieldSet(this, _transactionManager, transactionManager !== null && transactionManager !== void 0 ? transactionManager : new CpkTransactionManager());\n        __classPrivateFieldSet(this, _ownerAccount, ownerAccount);\n        __classPrivateFieldSet(this, _networks, normalizeNetworksConfig(defaultNetworks, networks));\n        if (saltNonce) {\n            __classPrivateFieldSet(this, _saltNonce, saltNonce);\n        }\n    }\n    /**\n     * Creates and initializes an instance of the CPK with the selected configuration parameters.\n     *\n     * @param opts - CPK configuration\n     * @returns The CPK instance\n     */\n    static create(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cpk = new CPK(opts);\n            if (opts) {\n                yield cpk.init();\n            }\n            return cpk;\n        });\n    }\n    /**\n     * Initializes the CPK instance.\n     */\n    init() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n                throw new Error('CPK uninitialized ethLibAdapter');\n            }\n            const networkId = yield __classPrivateFieldGet(this, _ethLibAdapter).getNetworkId();\n            const network = __classPrivateFieldGet(this, _networks)[networkId];\n            if (!network) {\n                throw new Error(`Unrecognized network ID ${networkId}`);\n            }\n            const ownerAccount = yield this.getOwnerAccount();\n            __classPrivateFieldSet(this, _isConnectedToSafe, (yield checkConnectedToSafe(__classPrivateFieldGet(this, _ethLibAdapter).getProvider())) ||\n                ((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.isSafeApp) === true);\n            __classPrivateFieldSet(this, _contractManager, yield ContractManager.create({\n                ethLibAdapter: __classPrivateFieldGet(this, _ethLibAdapter),\n                network,\n                ownerAccount,\n                saltNonce: __classPrivateFieldGet(this, _saltNonce),\n                isSafeApp: ((_b = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _b === void 0 ? void 0 : _b.isSafeApp) === true,\n                isConnectedToSafe: __classPrivateFieldGet(this, _isConnectedToSafe)\n            }));\n        });\n    }\n    /**\n     * Checks if the Proxy contract is deployed or not. The deployment of the Proxy contract happens automatically when the first transaction is submitted.\n     *\n     * @returns TRUE when the Proxy contract is deployed\n     */\n    isProxyDeployed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.address;\n            if (!address) {\n                throw new Error('CPK address uninitialized');\n            }\n            if (!this.ethLibAdapter) {\n                throw new Error('CPK ethLibAdapter uninitialized');\n            }\n            const codeAtAddress = yield this.ethLibAdapter.getCode(address);\n            const isDeployed = codeAtAddress !== '0x';\n            return isDeployed;\n        });\n    }\n    /**\n     * Returns the address of the account connected to the CPK (Proxy contract owner). However, if the CPK is running as a Safe App or connected to a Safe, the Safe address will be returned.\n     *\n     * @returns The address of the account connected to the CPK\n     */\n    getOwnerAccount() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.isSafeApp) {\n                return (yield __classPrivateFieldGet(this, _safeAppsSdkConnector).getSafeInfo()).safeAddress;\n            }\n            if (__classPrivateFieldGet(this, _ownerAccount)) {\n                return __classPrivateFieldGet(this, _ownerAccount);\n            }\n            if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n                throw new Error('CPK uninitialized ethLibAdapter');\n            }\n            return (_b = __classPrivateFieldGet(this, _ethLibAdapter)) === null || _b === void 0 ? void 0 : _b.getAccount();\n        });\n    }\n    /**\n     * Returns the ETH balance of the Proxy contract.\n     *\n     * @returns The ETH balance of the Proxy contract\n     */\n    getBalance() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.address;\n            if (!address) {\n                throw new Error('CPK address uninitialized');\n            }\n            if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n                throw new Error('CPK ethLibAdapter uninitialized');\n            }\n            return (_a = __classPrivateFieldGet(this, _ethLibAdapter)) === null || _a === void 0 ? void 0 : _a.getBalance(address);\n        });\n    }\n    /**\n     * Returns the ID of the connected network.\n     *\n     * @returns The ID of the connected network\n     */\n    getNetworkId() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.isSafeApp) {\n                const networkName = (yield __classPrivateFieldGet(this, _safeAppsSdkConnector).getSafeInfo()).network;\n                return getNetworkIdFromName(networkName);\n            }\n            if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n                throw new Error('CPK ethLibAdapter uninitialized');\n            }\n            return __classPrivateFieldGet(this, _ethLibAdapter).getNetworkId();\n        });\n    }\n    /**\n     * Returns the safeAppsSdkConnector used by the CPK.\n     *\n     * @returns The safeAppsSdkConnector used by the CPK\n     */\n    get safeAppsSdkConnector() {\n        return __classPrivateFieldGet(this, _safeAppsSdkConnector);\n    }\n    /**\n     * Returns the contractManager used by the CPK.\n     *\n     * @returns The contractManager used by the CPK\n     */\n    get contractManager() {\n        return __classPrivateFieldGet(this, _contractManager);\n    }\n    /**\n     * Returns the ethLibAdapter used by the CPK.\n     *\n     * @returns The ethLibAdapter used by the CPK\n     */\n    get ethLibAdapter() {\n        return __classPrivateFieldGet(this, _ethLibAdapter);\n    }\n    /**\n     * Returns a list of the contract addresses which drive the CPK per network by network ID.\n     *\n     * @returns The list of the contract addresses which drive the CPK per network by network ID\n     */\n    get networks() {\n        return __classPrivateFieldGet(this, _networks);\n    }\n    /**\n     * Checks if the CPK is connected to a Safe account or not.\n     *\n     * @returns TRUE if the CPK is connected to a Safe account\n     */\n    get isConnectedToSafe() {\n        return __classPrivateFieldGet(this, _isConnectedToSafe);\n    }\n    /**\n     * Returns the salt nonce used to deploy the Proxy Contract.\n     *\n     * @returns The salt nonce used to deploy the Proxy Contract\n     */\n    get saltNonce() {\n        return __classPrivateFieldGet(this, _saltNonce);\n    }\n    /**\n     * Returns the address of the Proxy contract.\n     *\n     * @returns The address of the Proxy contract\n     */\n    get address() {\n        var _a, _b, _c, _d;\n        if ((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.safeAddress) {\n            return (_b = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _b === void 0 ? void 0 : _b.safeAddress;\n        }\n        return (_d = (_c = __classPrivateFieldGet(this, _contractManager)) === null || _c === void 0 ? void 0 : _c.contract) === null || _d === void 0 ? void 0 : _d.address;\n    }\n    /**\n     * Sets the ethLibAdapter used by the CPK.\n     */\n    setEthLibAdapter(ethLibAdapter) {\n        __classPrivateFieldSet(this, _ethLibAdapter, ethLibAdapter);\n    }\n    /**\n     * Sets the transactionManager used by the CPK.\n     */\n    setTransactionManager(transactionManager) {\n        var _a;\n        if ((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.isSafeApp) {\n            throw new Error('TransactionManagers are not allowed when the app is running as a Safe App');\n        }\n        __classPrivateFieldSet(this, _transactionManager, transactionManager);\n    }\n    /**\n     * Sets the network configuration used by the CPK.\n     */\n    setNetworks(networks) {\n        __classPrivateFieldSet(this, _networks, normalizeNetworksConfig(defaultNetworks, networks));\n    }\n    /**\n     * Returns the encoding of a list of transactions.\n     *\n     * @param transactions - The transaction list\n     * @returns The encoding of a list of transactions\n     */\n    encodeMultiSendCallData(transactions) {\n        var _a;\n        if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n            throw new Error('CPK ethLibAdapter uninitialized');\n        }\n        const multiSend = ((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.multiSend) || __classPrivateFieldGet(this, _ethLibAdapter).getContract(multiSendAbi);\n        const standardizedTxs = transactions.map(standardizeTransaction);\n        const ethLibAdapter = __classPrivateFieldGet(this, _ethLibAdapter);\n        return multiSend.encode('multiSend', [\n            joinHexData(standardizedTxs.map((tx) => ethLibAdapter.abiEncodePacked({ type: 'uint8', value: tx.operation }, { type: 'address', value: tx.to }, { type: 'uint256', value: tx.value }, { type: 'uint256', value: getHexDataLength(tx.data) }, { type: 'bytes', value: tx.data })))\n        ]);\n    }\n    /**\n     * Executes a list of transactions.\n     *\n     * @param transactions - The transaction list to execute\n     * @param options - Execution configuration options\n     * @returns The transaction response\n     */\n    execTransactions(transactions, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const standardizedTxs = transactions.map(standardizeTransaction);\n            if (((_a = __classPrivateFieldGet(this, _safeAppsSdkConnector)) === null || _a === void 0 ? void 0 : _a.isSafeApp) && transactions.length >= 1) {\n                return __classPrivateFieldGet(this, _safeAppsSdkConnector).sendTransactions(standardizedTxs, {\n                    safeTxGas: options === null || options === void 0 ? void 0 : options.safeTxGas\n                });\n            }\n            const address = yield this.address;\n            if (!address) {\n                throw new Error('CPK address uninitialized');\n            }\n            if (!__classPrivateFieldGet(this, _contractManager)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            if (!__classPrivateFieldGet(this, _ethLibAdapter)) {\n                throw new Error('CPK ethLibAdapter uninitialized');\n            }\n            if (!__classPrivateFieldGet(this, _transactionManager)) {\n                throw new Error('CPK transactionManager uninitialized');\n            }\n            const ownerAccount = yield this.getOwnerAccount();\n            if (!ownerAccount) {\n                throw new Error('CPK ownerAccount uninitialized');\n            }\n            const safeExecTxParams = this.getSafeExecTxParams(transactions);\n            const sendOptions = normalizeGasLimit(Object.assign(Object.assign({}, options), { from: ownerAccount }));\n            const codeAtAddress = yield __classPrivateFieldGet(this, _ethLibAdapter).getCode(address);\n            const isDeployed = codeAtAddress !== '0x';\n            const txManager = !isDeployed ? new CpkTransactionManager() : __classPrivateFieldGet(this, _transactionManager);\n            return txManager.execTransactions({\n                ownerAccount,\n                safeExecTxParams,\n                transactions: standardizedTxs,\n                ethLibAdapter: __classPrivateFieldGet(this, _ethLibAdapter),\n                contractManager: __classPrivateFieldGet(this, _contractManager),\n                saltNonce: __classPrivateFieldGet(this, _saltNonce),\n                isDeployed,\n                isConnectedToSafe: __classPrivateFieldGet(this, _isConnectedToSafe),\n                sendOptions\n            });\n        });\n    }\n    /**\n     * Returns the Master Copy contract version.\n     *\n     * @returns The Master Copy contract version\n     */\n    getContractVersion() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const isProxyDeployed = yield this.isProxyDeployed();\n            if (!isProxyDeployed) {\n                throw new Error('CPK Proxy contract is not deployed');\n            }\n            if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.versionUtils)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            return yield __classPrivateFieldGet(this, _contractManager).versionUtils.getContractVersion();\n        });\n    }\n    /**\n     * Returns the list of addresses of all the enabled Safe modules.\n     *\n     * @returns The list of addresses of all the enabled Safe modules\n     */\n    getModules() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const isProxyDeployed = yield this.isProxyDeployed();\n            if (!isProxyDeployed) {\n                throw new Error('CPK Proxy contract is not deployed');\n            }\n            if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.versionUtils)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            return yield __classPrivateFieldGet(this, _contractManager).versionUtils.getModules();\n        });\n    }\n    /**\n     * Checks if a specific Safe module is enabled or not.\n     *\n     * @param moduleAddress - The desired module address\n     * @returns TRUE if the module is enabled\n     */\n    isModuleEnabled(moduleAddress) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const isProxyDeployed = yield this.isProxyDeployed();\n            if (!isProxyDeployed) {\n                throw new Error('CPK Proxy contract is not deployed');\n            }\n            if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.versionUtils)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            return yield __classPrivateFieldGet(this, _contractManager).versionUtils.isModuleEnabled(moduleAddress);\n        });\n    }\n    /**\n     * Enables a Safe module\n     *\n     * @param moduleAddress - The desired module address\n     * @returns The transaction response\n     */\n    enableModule(moduleAddress) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.versionUtils)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            const address = yield this.address;\n            if (!address) {\n                throw new Error('CPK address uninitialized');\n            }\n            return yield this.execTransactions([\n                {\n                    to: address,\n                    data: yield __classPrivateFieldGet(this, _contractManager).versionUtils.encodeEnableModule(moduleAddress),\n                    operation: CPK.Call\n                }\n            ]);\n        });\n    }\n    /**\n     * Disables a Safe module\n     *\n     * @param moduleAddress - The desired module address\n     * @returns The transaction response\n     */\n    disableModule(moduleAddress) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const isProxyDeployed = yield this.isProxyDeployed();\n            if (!isProxyDeployed) {\n                throw new Error('CPK Proxy contract is not deployed');\n            }\n            if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.versionUtils)) {\n                throw new Error('CPK contractManager uninitialized');\n            }\n            const address = yield this.address;\n            if (!address) {\n                throw new Error('CPK address uninitialized');\n            }\n            return yield this.execTransactions([\n                {\n                    to: address,\n                    data: yield __classPrivateFieldGet(this, _contractManager).versionUtils.encodeDisableModule(moduleAddress),\n                    operation: CPK.Call\n                }\n            ]);\n        });\n    }\n    getSafeExecTxParams(transactions) {\n        var _a, _b;\n        if (transactions.length === 1) {\n            return standardizeTransaction(transactions[0]);\n        }\n        if (!((_a = __classPrivateFieldGet(this, _contractManager)) === null || _a === void 0 ? void 0 : _a.multiSend)) {\n            throw new Error('CPK MultiSend uninitialized');\n        }\n        return {\n            to: (_b = __classPrivateFieldGet(this, _contractManager)) === null || _b === void 0 ? void 0 : _b.multiSend.address,\n            value: '0',\n            data: this.encodeMultiSendCallData(transactions),\n            operation: CPK.DelegateCall\n        };\n    }\n}\n_safeAppsSdkConnector = new WeakMap(), _ethLibAdapter = new WeakMap(), _transactionManager = new WeakMap(), _contractManager = new WeakMap(), _networks = new WeakMap(), _ownerAccount = new WeakMap(), _saltNonce = new WeakMap(), _isConnectedToSafe = new WeakMap();\nCPK.Call = OperationType.Call;\nCPK.DelegateCall = OperationType.DelegateCall;\nexport default CPK;\n//# sourceMappingURL=CPK.js.map","import { joinHexData } from '../utils/hexData';\nclass EthLibAdapter {\n    abiEncodePacked(...params) {\n        return joinHexData(params.map(({ type, value }) => {\n            const encoded = this.abiEncode([type], [value]);\n            if (type === 'bytes' || type === 'string') {\n                const bytesLength = parseInt(encoded.slice(66, 130), 16);\n                return encoded.slice(130, 130 + 2 * bytesLength);\n            }\n            let typeMatch = type.match(/^(?:u?int\\d*|bytes\\d+|address)\\[\\]$/);\n            if (typeMatch) {\n                return encoded.slice(130);\n            }\n            if (type.startsWith('bytes')) {\n                const bytesLength = parseInt(type.slice(5));\n                return encoded.slice(2, 2 + 2 * bytesLength);\n            }\n            typeMatch = type.match(/^u?int(\\d*)$/);\n            if (typeMatch) {\n                if (typeMatch[1] !== '') {\n                    const bytesLength = parseInt(typeMatch[1]) / 8;\n                    return encoded.slice(-2 * bytesLength);\n                }\n                return encoded.slice(-64);\n            }\n            if (type === 'address') {\n                return encoded.slice(-40);\n            }\n            throw new Error(`unsupported type ${type}`);\n        }));\n    }\n    decodeError(revertData) {\n        if (!revertData.startsWith('0x08c379a0'))\n            throw new Error('Unrecognized error format');\n        return this.abiDecode(['string'], `0x${revertData.slice(10)}`)[0];\n    }\n}\nexport default EthLibAdapter;\n//# sourceMappingURL=EthLibAdapter.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { normalizeGasLimit } from '../../utils/transactions';\nimport { toTxResult } from './';\nclass Web3ContractAdapter {\n    constructor(contract) {\n        this.contract = contract;\n    }\n    get address() {\n        return this.contract.options.address;\n    }\n    call(methodName, params, options) {\n        return this.contract.methods[methodName](...params).call(options && normalizeGasLimit(options));\n    }\n    send(methodName, params, options) {\n        const promiEvent = this.contract.methods[methodName](...params).send(options && normalizeGasLimit(options));\n        return toTxResult(promiEvent, options);\n    }\n    estimateGas(methodName, params, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Number(yield this.contract.methods[methodName](...params).estimateGas(options && normalizeGasLimit(options)));\n        });\n    }\n    encode(methodName, params) {\n        return this.contract.methods[methodName](...params).encodeABI();\n    }\n}\nexport default Web3ContractAdapter;\n//# sourceMappingURL=Web3ContractAdapter.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport BigNumber from 'bignumber.js';\nimport { formatCallTx, normalizeGasLimit } from '../../utils/transactions';\nimport EthLibAdapter from '../EthLibAdapter';\nimport Web3ContractAdapter from './Web3ContractAdapter';\nexport function toTxResult(promiEvent, sendOptions) {\n    return new Promise((resolve, reject) => promiEvent\n        .once('transactionHash', (hash) => resolve({ sendOptions, promiEvent, hash }))\n        .catch(reject));\n}\nclass Web3Adapter extends EthLibAdapter {\n    /**\n     * Creates an instance of Web3Adapter\n     *\n     * @param options - Web3Adapter configuration\n     * @returns The Web3Adapter instance\n     */\n    constructor({ web3 }) {\n        super();\n        if (!web3) {\n            throw new Error('web3 property missing from options');\n        }\n        this.web3 = web3;\n    }\n    /**\n     * Returns the current provider\n     *\n     * @returns The current provider\n     */\n    getProvider() {\n        return this.web3.currentProvider;\n    }\n    /**\n     * Sends a network request via JSON-RPC.\n     *\n     * @param method - JSON-RPC method\n     * @param params - Params\n     * @returns The request response\n     */\n    providerSend(method, params) {\n        // TO-DO: Use semver comparison\n        return this.web3.version.split('.')[0] > 1\n            ? this.web3.currentProvider.send(method, params)\n            : new Promise((resolve, reject) => this.web3.currentProvider.send({\n                jsonrpc: '2.0',\n                id: new Date().getTime(),\n                method,\n                params\n            }, (err, result) => {\n                if (err)\n                    return reject(err);\n                if (result.error)\n                    return reject(result.error);\n                return resolve(result.result);\n            }));\n    }\n    /**\n     * Signs data using a specific account.\n     *\n     * @param message - Data to sign\n     * @param ownerAccount - Address to sign the data with\n     * @returns The signature\n     */\n    signMessage(message, ownerAccount) {\n        return this.web3.eth.sign(message, ownerAccount);\n    }\n    /**\n     * Returns the current network ID.\n     *\n     * @returns The network ID\n     */\n    getNetworkId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.web3.eth.net.getId();\n        });\n    }\n    /**\n     * Returns the default account used as the default \"from\" property.\n     *\n     * @returns The default account address\n     */\n    getAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.web3.eth.defaultAccount || (yield this.web3.eth.getAccounts())[0];\n        });\n    }\n    /**\n     * Returns the balance of an address.\n     *\n     * @param address - The desired address\n     * @returns The balance of the address\n     */\n    getBalance(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new BigNumber(yield this.web3.eth.getBalance(address));\n        });\n    }\n    /**\n     * Returns the keccak256 hash of the data.\n     *\n     * @param data - Desired data\n     * @returns The keccak256 of the data\n     */\n    keccak256(data) {\n        return this.web3.utils.keccak256(data);\n    }\n    /**\n     * Encodes a function parameters based on its JSON interface object.\n     *\n     * @param types - An array with the types or a JSON interface of a function\n     * @param values - The parameters to encode\n     * @returns The ABI encoded parameters\n     */\n    abiEncode(types, values) {\n        return this.web3.eth.abi.encodeParameters(types, values);\n    }\n    /**\n     * Decodes ABI encoded parameters to is JavaScript types.\n     *\n     * @param types - An array with the types or a JSON interface outputs array\n     * @param data - The ABI byte code to decode\n     * @returns The ABI encoded parameters\n     */\n    abiDecode(types, data) {\n        return this.web3.eth.abi.decodeParameters(types, data);\n    }\n    /**\n     * Deterministically returns the address where a contract will be deployed.\n     *\n     * @param deployer - Account that deploys the contract\n     * @param salt - Salt\n     * @param initCode - Code to be deployed\n     * @returns The address where the contract will be deployed\n     */\n    calcCreate2Address(deployer, salt, initCode) {\n        return this.web3.utils.toChecksumAddress(this.web3.utils\n            .soliditySha3('0xff', { t: 'address', v: deployer }, { t: 'bytes32', v: salt }, this.keccak256(initCode))\n            .slice(-40));\n    }\n    /**\n     * Returns the code at a specific address.\n     *\n     * @param address - The desired address\n     * @returns The code of the contract\n     */\n    getCode(address) {\n        return this.web3.eth.getCode(address);\n    }\n    /**\n     * Returns a block matching the block number or block hash.\n     *\n     * @param blockHashOrBlockNumber - The block number or block hash\n     * @returns The block object\n     */\n    getBlock(blockHashOrBlockNumber) {\n        return this.web3.eth.getBlock(blockHashOrBlockNumber);\n    }\n    /**\n     * Returns an instance of a contract.\n     *\n     * @param abi - ABI of the desired contract\n     * @param address - Contract address\n     * @returns The contract instance\n     */\n    getContract(abi, address) {\n        const contract = new this.web3.eth.Contract(abi, address);\n        return new Web3ContractAdapter(contract);\n    }\n    /**\n     * Returns the revert reason when a call fails.\n     *\n     * @param tx - Transaction to execute\n     * @param block - Block number\n     * @returns The revert data when the call fails\n     */\n    getCallRevertData(tx, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // this block handles old Geth/Ganache --noVMErrorsOnRPCResponse\n                // use a low level eth_call instead of web3.eth.call so\n                // full error data from eth node is available if provider is Web3 1.x\n                return yield this.providerSend('eth_call', [formatCallTx(tx), block]);\n            }\n            catch (e) {\n                let errData = e.data;\n                if (!errData && e.message.startsWith('Node error: ')) {\n                    // parse out error data from eth node if provider is Web3 2.x\n                    errData = JSON.parse(e.message.slice(12)).data;\n                }\n                if (typeof errData === 'string') {\n                    if (errData.startsWith('Reverted 0x'))\n                        // handle OpenEthereum revert data format\n                        return errData.slice(9);\n                    if (errData.startsWith('0x'))\n                        // handle new Geth format\n                        return errData;\n                }\n                // handle Ganache revert data format\n                const txHash = Object.getOwnPropertyNames(errData).filter((k) => k.startsWith('0x'))[0];\n                return errData[txHash].return;\n            }\n        });\n    }\n    /**\n     * Sends a transaction to the network.\n     *\n     * @param tx - Transaction to send\n     * @returns The transaction response\n     */\n    ethSendTransaction(tx) {\n        return toTxResult(this.web3.eth.sendTransaction(normalizeGasLimit(tx)), tx);\n    }\n    /**\n     * Formats transaction result depending on the current provider.\n     *\n     * @param txHash - Transaction hash\n     * @param tx - Transaction response\n     * @returns The formatted transaction response\n     */\n    toSafeRelayTxResult(txHash, tx) {\n        tx['transactionHash'] = tx['txHash'];\n        delete tx['txHash'];\n        return new Promise((resolve, reject) => resolve({\n            promiEvent: new Promise((resolve, reject) => resolve(tx)),\n            hash: txHash\n        }));\n    }\n    toRocksideRelayTxResult(tx) {\n        tx['transactionHash'] = tx['transaction_hash'];\n        delete tx['transaction_hash'];\n        return new Promise((resolve, reject) => resolve({\n            promiEvent: new Promise((resolve, reject) => resolve(tx)),\n            hash: tx['transactionHash']\n        }));\n    }\n}\nexport default Web3Adapter;\n//# sourceMappingURL=index.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport fetch from 'node-fetch';\nexport var HttpMethod;\n(function (HttpMethod) {\n    HttpMethod[\"GET\"] = \"GET\";\n    HttpMethod[\"POST\"] = \"POST\";\n})(HttpMethod || (HttpMethod = {}));\nexport const sendRequest = ({ url, method, body, expectedHttpCodeResponse }) => __awaiter(void 0, void 0, void 0, function* () {\n    const headers = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    };\n    const response = yield fetch(url, { method, headers, body });\n    const jsonResponse = yield response.json();\n    if (response.status !== expectedHttpCodeResponse) {\n        throw new Error(jsonResponse.exception);\n    }\n    return jsonResponse;\n});\n//# sourceMappingURL=httpRequests.js.map","export const safeTxRelayUrl = 'https://safe-relay.gnosis.io/';\nexport const rocksideTxRelayUrl = 'https://api.rockside.io';\n//# sourceMappingURL=transactionManagers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _speed;\nimport BigNumber from 'bignumber.js';\nimport { rocksideTxRelayUrl } from '../../config/transactionManagers';\nimport { zeroAddress } from '../../utils/constants';\nimport { HttpMethod, sendRequest } from '../../utils/httpRequests';\nimport { TransactionManagerNames } from '../TransactionManager';\nimport { getTransactionHashSignature } from '../utils';\nexport var RocksideSpeed;\n(function (RocksideSpeed) {\n    RocksideSpeed[\"Fast\"] = \"fast\";\n    RocksideSpeed[\"Fastest\"] = \"fastest\";\n    RocksideSpeed[\"Safelow\"] = \"safelow\";\n    RocksideSpeed[\"Standard\"] = \"standard\";\n})(RocksideSpeed || (RocksideSpeed = {}));\nclass RocksideRelayTransactionManager {\n    constructor({ speed }) {\n        _speed.set(this, void 0);\n        __classPrivateFieldSet(this, _speed, speed);\n    }\n    get config() {\n        return {\n            name: TransactionManagerNames.RocksideTxRelayManager,\n            speed: __classPrivateFieldGet(this, _speed)\n        };\n    }\n    execTransactions({ ownerAccount, safeExecTxParams, contractManager, ethLibAdapter }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contract } = contractManager;\n            if (!contract) {\n                throw new Error('CPK Proxy contract uninitialized');\n            }\n            let network;\n            const networkId = yield ethLibAdapter.getNetworkId();\n            switch (networkId) {\n                case 1:\n                    network = 'mainnet';\n                    break;\n                case 3:\n                    network = 'ropsten';\n                    break;\n                default:\n                    throw new Error('Network not supported when using Rockside transaction relay');\n            }\n            const nonce = yield contract.call('nonce', []);\n            const txRelayParams = yield this.getTxRelayParams(contract.address, network);\n            const safeTransaction = {\n                to: safeExecTxParams.to,\n                value: safeExecTxParams.value,\n                data: safeExecTxParams.data,\n                operation: safeExecTxParams.operation,\n                safeTxGas: 0,\n                baseGas: 0,\n                gasPrice: Number(txRelayParams.gas_price),\n                gasToken: zeroAddress,\n                refundReceiver: txRelayParams.relayer,\n                nonce\n            };\n            const transactionHash = yield contract.call('getTransactionHash', [\n                safeTransaction.to,\n                new BigNumber(safeExecTxParams.value).toString(10),\n                safeTransaction.data,\n                safeTransaction.operation,\n                safeTransaction.safeTxGas,\n                safeTransaction.baseGas,\n                safeTransaction.gasPrice,\n                safeTransaction.gasToken,\n                safeTransaction.refundReceiver,\n                safeTransaction.nonce\n            ]);\n            const signatures = yield getTransactionHashSignature(ethLibAdapter, ownerAccount, transactionHash);\n            const data = contract.encode('execTransaction', [\n                safeTransaction.to,\n                new BigNumber(safeExecTxParams.value).toString(10),\n                safeTransaction.data,\n                safeTransaction.operation,\n                safeTransaction.safeTxGas,\n                safeTransaction.baseGas,\n                safeTransaction.gasPrice,\n                safeTransaction.gasToken,\n                safeTransaction.refundReceiver,\n                signatures\n            ]);\n            const trackingId = yield this.sendTxToRelay(contract.address, data, network);\n            return this.followTransaction(network, trackingId, ethLibAdapter);\n        });\n    }\n    getTxRelayParams(safeAccount, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsonResponse = yield sendRequest({\n                url: `${rocksideTxRelayUrl}/ethereum/${network}/relay/${safeAccount}/params`,\n                method: HttpMethod.GET,\n                expectedHttpCodeResponse: 200\n            });\n            return jsonResponse.speeds[__classPrivateFieldGet(this, _speed)];\n        });\n    }\n    sendTxToRelay(safeAccount, data, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsonResponse = yield sendRequest({\n                url: `${rocksideTxRelayUrl}/ethereum/${network}/relay/${safeAccount}`,\n                method: HttpMethod.POST,\n                body: JSON.stringify({ data, speed: __classPrivateFieldGet(this, _speed) }),\n                expectedHttpCodeResponse: 200\n            });\n            return jsonResponse.tracking_id;\n        });\n    }\n    followTransaction(network, trackingId, ethLibAdapter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsonResponse = yield sendRequest({\n                url: `${rocksideTxRelayUrl}/ethereum/${network}/transactions/${trackingId}`,\n                method: HttpMethod.GET,\n                expectedHttpCodeResponse: 200\n            });\n            return ethLibAdapter.toRocksideRelayTxResult(jsonResponse);\n        });\n    }\n}\n_speed = new WeakMap();\nexport default RocksideRelayTransactionManager;\n//# sourceMappingURL=index.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport BigNumber from 'bignumber.js';\nimport { zeroAddress } from '../../utils/constants';\nimport { HttpMethod, sendRequest } from '../../utils/httpRequests';\nimport { TransactionManagerNames } from '../TransactionManager';\nBigNumber.set({ EXPONENTIAL_AT: [-7, 255] });\nclass SafeRelayTransactionManager {\n    /**\n     * Initializes an instance of the Safe Relay Transaction Manager.\n     *\n     * @param options - The URL pointing to the Safe Transaction Service\n     * @returns The SafeRelayTransactionManager instance\n     */\n    constructor(options) {\n        const { url } = options;\n        if (!url) {\n            throw new Error('url property missing from options');\n        }\n        this.url = url;\n    }\n    /**\n     * Returns the configuration of the Safe Relay Transaction Manager.\n     *\n     * @returns The name of the TransactionManager in use and the URL of the service\n     */\n    get config() {\n        return {\n            name: TransactionManagerNames.SafeTxRelayManager,\n            url: this.url\n        };\n    }\n    /**\n     * Executes a list of transactions via the Safe Transaction Relay.\n     *\n     * @param options\n     * @returns The transaction response\n     */\n    execTransactions({ ownerAccount, safeExecTxParams, contractManager, ethLibAdapter, isConnectedToSafe }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contract } = contractManager;\n            if (!contract) {\n                throw new Error('CPK Proxy contract uninitialized');\n            }\n            if (isConnectedToSafe) {\n                throw new Error('The use of the relay service is not supported when the CPK is connected to a Gnosis Safe');\n            }\n            const relayEstimations = yield this.getTransactionEstimations({\n                safe: contract.address,\n                to: safeExecTxParams.to,\n                value: new BigNumber(safeExecTxParams.value).toString(10),\n                data: safeExecTxParams.data,\n                operation: safeExecTxParams.operation\n            });\n            // TO-DO: dataGas will be obsolete. Check again when this endpoint is updated to v2\n            const tx = {\n                to: safeExecTxParams.to,\n                value: new BigNumber(safeExecTxParams.value).toString(10),\n                data: safeExecTxParams.data,\n                operation: safeExecTxParams.operation,\n                safeTxGas: relayEstimations.safeTxGas,\n                dataGas: relayEstimations.baseGas,\n                gasPrice: relayEstimations.gasPrice,\n                gasToken: relayEstimations.gasToken,\n                refundReceiver: zeroAddress,\n                nonce: relayEstimations.lastUsedNonce + 1\n            };\n            const txHash = yield contract.call('getTransactionHash', [\n                tx.to,\n                tx.value,\n                tx.data,\n                tx.operation,\n                tx.safeTxGas,\n                tx.dataGas,\n                tx.gasPrice,\n                tx.gasToken,\n                tx.refundReceiver,\n                tx.nonce\n            ]);\n            const rsvSignature = yield this.signTransactionHash(ethLibAdapter, ownerAccount, txHash);\n            return this.sendTransactionToRelay({\n                url: this.url,\n                safe: contract.address,\n                tx,\n                signatures: [rsvSignature],\n                ethLibAdapter\n            });\n        });\n    }\n    getTransactionEstimations({ safe, to, value, data, operation, gasToken }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const body = {\n                safe,\n                to,\n                value,\n                data,\n                operation\n            };\n            if (gasToken) {\n                body.gasToken = gasToken;\n            }\n            const jsonResponse = yield sendRequest({\n                url: `${this.url}/api/v1/safes/${safe}/transactions/estimate/`,\n                method: HttpMethod.POST,\n                body: JSON.stringify(body),\n                expectedHttpCodeResponse: 200\n            });\n            return jsonResponse;\n        });\n    }\n    sendTransactionToRelay({ tx, safe, signatures, ethLibAdapter }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsonResponse = yield sendRequest({\n                url: `${this.url}/api/v1/safes/${safe}/transactions/`,\n                method: HttpMethod.POST,\n                body: JSON.stringify(Object.assign(Object.assign({ safe }, tx), { signatures })),\n                expectedHttpCodeResponse: 201\n            });\n            return ethLibAdapter.toSafeRelayTxResult(jsonResponse.txHash, jsonResponse.ethereumTx);\n        });\n    }\n    signTransactionHash(ethLibAdapter, ownerAccount, txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let sig = yield ethLibAdapter.signMessage(txHash, ownerAccount);\n            let sigV = parseInt(sig.slice(-2), 16);\n            switch (sigV) {\n                case 0:\n                case 1:\n                    sigV += 31;\n                    break;\n                case 27:\n                case 28:\n                    sigV += 4;\n                    break;\n                default:\n                    throw new Error('Invalid signature');\n            }\n            sig = sig.slice(0, -2) + sigV.toString(16);\n            return {\n                r: new BigNumber('0x' + sig.slice(2, 66)).toString(10),\n                s: new BigNumber('0x' + sig.slice(66, 130)).toString(10),\n                v: new BigNumber('0x' + sig.slice(130, 132)).toString(10)\n            };\n        });\n    }\n}\nexport default SafeRelayTransactionManager;\n//# sourceMappingURL=index.js.map","import { defaultNetworks } from './config/networks';\nimport CPK from './CPK';\nimport EthersAdapter from './ethLibAdapters/EthersAdapter';\nimport EthLibAdapter from './ethLibAdapters/EthLibAdapter';\nimport Web3Adapter from './ethLibAdapters/Web3Adapter';\nimport CpkTransactionManager from './transactionManagers/CpkTransactionManager';\nimport RocksideTxRelayManager, { RocksideSpeed } from './transactionManagers/RocksideTxRelayManager';\nimport SafeTxRelayManager from './transactionManagers/SafeTxRelayManager';\nimport { TransactionManagerNames } from './transactionManagers/TransactionManager';\nimport { OperationType } from './utils/transactions';\nexport default CPK;\nexport { EthLibAdapter, EthersAdapter, Web3Adapter, \n// TransactionManagers\nCpkTransactionManager, SafeTxRelayManager, RocksideTxRelayManager, RocksideSpeed, TransactionManagerNames, \n// Transactions\nOperationType, \n// Configuration\ndefaultNetworks };\n//# sourceMappingURL=index.js.map","import * as React from 'react'\nimport styled from 'styled-components'\nimport Web3Connect from 'web3connect'\n\nconst Web3ConnectButton = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 180px;\n  & > div {\n    padding: 0;\n  }\n  .web3connect-connect-button {\n    outline: none;\n    background: #008c73;\n    border-radius: 4px;\n    color: #fff;\n    cursor: pointer;\n    transform: none;\n    font-weight: normal;\n    font-size: 14px;\n    box-shadow: none;\n  }\n  .web3connect-connect-button:hover {\n    background: #005546;\n    box-shadow: none;\n    transform: none;\n  }\n`\n\nconst {\n  default: WalletConnectProvider\n} = require('@walletconnect/web3-provider')\n\ntype ConnectButtonProps = {\n  onConnect: Function\n}\n\nconst ConnectButton = ({ onConnect }: ConnectButtonProps) => (\n  <Web3ConnectButton>\n    <Web3Connect.Button\n      providerOptions={{\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId: 'b42c928da8fd4c1f90374b18aa9ac6ba'\n          }\n        }\n      }}\n      onConnect={onConnect}\n      onClose={() => {}}\n    />\n  </Web3ConnectButton>\n)\n\nexport default ConnectButton\n","import { Tab, TabItem, Title } from '@gnosis.pm/safe-react-components'\nimport BigNumber from 'bignumber.js'\nimport CpkInfo from 'components/CpkInfo'\nimport SafeModules from 'components/SafeModules'\nimport Transactions from 'components/Transactions'\nimport CPK, {\n  RocksideSpeed,\n  RocksideTxRelayManager,\n  TransactionManagerConfig,\n  Web3Adapter\n} from 'contract-proxy-kit'\nimport keccak256 from 'keccak256'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport ConnectButton from '../ConnectButton'\n\nconst Container = styled.div`\n  width: 550px;\n  padding: 20px;\n  margin: 0 auto;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`\n\nconst TitleLine = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  h4 {\n    margin: 0 !important;\n  }\n`\n\nconst Content = styled.div`\n  margin-top: 30px;\n`\n\nexport interface WalletState {\n  isSafeApp?: boolean\n  isConnectedToSafe?: boolean\n  isProxyDeployed?: boolean\n  saltNonce?: string\n  contractVersion?: string\n  cpkAddress?: string\n  cpkBalance?: BigNumber\n  networkId?: number\n  ownerAddress?: string\n  txManager?: TransactionManagerConfig\n}\n\nconst initialWalletState: WalletState = {\n  isSafeApp: undefined,\n  isConnectedToSafe: undefined,\n  isProxyDeployed: undefined,\n  saltNonce: undefined,\n  contractVersion: undefined,\n  cpkAddress: undefined,\n  cpkBalance: undefined,\n  networkId: undefined,\n  ownerAddress: undefined,\n  txManager: undefined\n}\n\nconst tabs: TabItem[] = [\n  {\n    id: '1',\n    label: 'CPK Info',\n    icon: 'info'\n  },\n  {\n    id: '2',\n    label: 'CPK Transactions',\n    icon: 'transactionsInactive'\n  },\n  {\n    id: '3',\n    label: 'CPK Modules',\n    icon: 'apps'\n  }\n]\n\nconst App = () => {\n  const [selectedTab, setSelectedTab] = useState('1')\n  const [enabledRocksideTxRelay, setEnabledRocksideTxRelay] = useState(false)\n  const [web3, setWeb3] = React.useState<Web3 | undefined>(undefined)\n  const [saltNonce, setSaltNonce] = React.useState<string>('Contract Proxy Kit')\n  const [cpk, setCpk] = useState<CPK | undefined>(undefined)\n  const [walletState, updateWalletState] = useState<WalletState>(\n    initialWalletState\n  )\n\n  const onWeb3Connect = (provider: any) => {\n    if (provider) {\n      setWeb3(new Web3(provider))\n    }\n  }\n\n  useEffect(() => {\n    const initializeCpk = async () => {\n      if (!web3) return\n      let formatedSaltNonce = saltNonce\n      if (saltNonce) {\n        formatedSaltNonce = '0x' + keccak256(saltNonce).toString('hex')\n      }\n      const ethLibAdapter = new Web3Adapter({ web3 })\n\n      /*\n      Safe contracts are not officially deployed on Ropsten. This means that in\n      order to test Rockside's transaction relay (only available on Mainnet and\n      Ropsten networks) we have to pass the contract addresses as a parameter\n      when using the CPK.\n      These are an exmaple of the Safe contracts deployed on Ropsten and there is\n      no need to provide the contract addresses for Mainnet.\n      */\n      const networks = {\n        3: {\n          masterCopyAddress: '0x798960252148C0215F593c14b7c5B07183826212',\n          proxyFactoryAddress: '0x8240eE136011392736920419cB7CB8bBadAc27E4',\n          multiSendAddress: '0xe637DE43c1702fd59A2E7ab8F4224C7CBb0e9D3D',\n          fallbackHandlerAddress: '0x83B1CB4017acf298b9Ff47FC4e380282738406B2'\n        }\n      }\n      let transactionManager: RocksideTxRelayManager | undefined\n      if (enabledRocksideTxRelay) {\n        transactionManager = new RocksideTxRelayManager({\n          speed: RocksideSpeed.Fastest\n        })\n      }\n\n      let newCpk\n      try {\n        newCpk = await CPK.create({\n          ethLibAdapter,\n          networks,\n          saltNonce: formatedSaltNonce,\n          transactionManager\n        })\n      } catch (error: any) {\n        alert('Try with a different network')\n        console.error(error)\n        return\n      }\n      setCpk(newCpk)\n    }\n    initializeCpk()\n  }, [web3, saltNonce, enabledRocksideTxRelay])\n\n  useEffect(() => {\n    const updateCpk = async () => {\n      if (!cpk) return\n      const isProxyDeployed = await cpk.isProxyDeployed()\n      const contractVersion = isProxyDeployed\n        ? await cpk.getContractVersion()\n        : undefined\n\n      updateWalletState({\n        isSafeApp: cpk.safeAppsSdkConnector?.isSafeApp,\n        isConnectedToSafe: cpk.isConnectedToSafe,\n        isProxyDeployed,\n        saltNonce: await cpk.saltNonce,\n        contractVersion,\n        cpkAddress: await cpk.address,\n        cpkBalance: await cpk.getBalance(),\n        networkId: await cpk.getNetworkId(),\n        ownerAddress: await cpk.getOwnerAccount()\n      })\n    }\n    updateCpk()\n  }, [cpk])\n\n  return (\n    <Container>\n      <TitleLine>\n        <Title size=\"sm\">CPK Configuration App</Title>\n        <ConnectButton onConnect={onWeb3Connect} />\n      </TitleLine>\n      {cpk && (\n        <Content>\n          <Tab\n            onChange={setSelectedTab}\n            selectedTab={selectedTab}\n            variant=\"outlined\"\n            items={tabs}\n          />\n          {selectedTab === '1' && (\n            <CpkInfo\n              walletState={walletState}\n              saltNonce={saltNonce}\n              setSaltNonce={setSaltNonce}\n            />\n          )}\n          {selectedTab === '2' && (\n            <Transactions\n              cpk={cpk}\n              walletState={walletState}\n              enabledRocksideTxRelay={enabledRocksideTxRelay}\n              setEnabledRocksideTxRelay={setEnabledRocksideTxRelay}\n            />\n          )}\n          {selectedTab === '3' && (\n            <SafeModules cpk={cpk} walletState={walletState} />\n          )}\n        </Content>\n      )}\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { theme } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport GlobalStyle from 'styles/globalStyles'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}